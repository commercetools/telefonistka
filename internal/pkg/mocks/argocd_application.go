// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/argoproj/argo-cd/v2/pkg/apiclient/application (interfaces: ApplicationServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=argocd_application.go -package=mocks github.com/argoproj/argo-cd/v2/pkg/apiclient/application ApplicationServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	apiclient "github.com/argoproj/argo-cd/v2/reposerver/apiclient"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "k8s.io/api/core/v1"
)

// MockApplicationServiceClient is a mock of ApplicationServiceClient interface.
type MockApplicationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceClientMockRecorder
	isgomock struct{}
}

// MockApplicationServiceClientMockRecorder is the mock recorder for MockApplicationServiceClient.
type MockApplicationServiceClientMockRecorder struct {
	mock *MockApplicationServiceClient
}

// NewMockApplicationServiceClient creates a new mock instance.
func NewMockApplicationServiceClient(ctrl *gomock.Controller) *MockApplicationServiceClient {
	mock := &MockApplicationServiceClient{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationServiceClient) EXPECT() *MockApplicationServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockApplicationServiceClient) Create(ctx context.Context, in *application.ApplicationCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockApplicationServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockApplicationServiceClient) Delete(ctx context.Context, in *application.ApplicationDeleteRequest, opts ...grpc.CallOption) (*application.ApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*application.ApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockApplicationServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplicationServiceClient)(nil).Delete), varargs...)
}

// DeleteResource mocks base method.
func (m *MockApplicationServiceClient) DeleteResource(ctx context.Context, in *application.ApplicationResourceDeleteRequest, opts ...grpc.CallOption) (*application.ApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResource", varargs...)
	ret0, _ := ret[0].(*application.ApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockApplicationServiceClientMockRecorder) DeleteResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockApplicationServiceClient)(nil).DeleteResource), varargs...)
}

// Get mocks base method.
func (m *MockApplicationServiceClient) Get(ctx context.Context, in *application.ApplicationQuery, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockApplicationServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationServiceClient)(nil).Get), varargs...)
}

// GetApplicationSyncWindows mocks base method.
func (m *MockApplicationServiceClient) GetApplicationSyncWindows(ctx context.Context, in *application.ApplicationSyncWindowsQuery, opts ...grpc.CallOption) (*application.ApplicationSyncWindowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationSyncWindows", varargs...)
	ret0, _ := ret[0].(*application.ApplicationSyncWindowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationSyncWindows indicates an expected call of GetApplicationSyncWindows.
func (mr *MockApplicationServiceClientMockRecorder) GetApplicationSyncWindows(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationSyncWindows", reflect.TypeOf((*MockApplicationServiceClient)(nil).GetApplicationSyncWindows), varargs...)
}

// GetManifests mocks base method.
func (m *MockApplicationServiceClient) GetManifests(ctx context.Context, in *application.ApplicationManifestQuery, opts ...grpc.CallOption) (*apiclient.ManifestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManifests", varargs...)
	ret0, _ := ret[0].(*apiclient.ManifestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifests indicates an expected call of GetManifests.
func (mr *MockApplicationServiceClientMockRecorder) GetManifests(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifests", reflect.TypeOf((*MockApplicationServiceClient)(nil).GetManifests), varargs...)
}

// GetManifestsWithFiles mocks base method.
func (m *MockApplicationServiceClient) GetManifestsWithFiles(ctx context.Context, opts ...grpc.CallOption) (application.ApplicationService_GetManifestsWithFilesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManifestsWithFiles", varargs...)
	ret0, _ := ret[0].(application.ApplicationService_GetManifestsWithFilesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifestsWithFiles indicates an expected call of GetManifestsWithFiles.
func (mr *MockApplicationServiceClientMockRecorder) GetManifestsWithFiles(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifestsWithFiles", reflect.TypeOf((*MockApplicationServiceClient)(nil).GetManifestsWithFiles), varargs...)
}

// GetResource mocks base method.
func (m *MockApplicationServiceClient) GetResource(ctx context.Context, in *application.ApplicationResourceRequest, opts ...grpc.CallOption) (*application.ApplicationResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*application.ApplicationResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockApplicationServiceClientMockRecorder) GetResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockApplicationServiceClient)(nil).GetResource), varargs...)
}

// List mocks base method.
func (m *MockApplicationServiceClient) List(ctx context.Context, in *application.ApplicationQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ApplicationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockApplicationServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationServiceClient)(nil).List), varargs...)
}

// ListLinks mocks base method.
func (m *MockApplicationServiceClient) ListLinks(ctx context.Context, in *application.ListAppLinksRequest, opts ...grpc.CallOption) (*application.LinksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinks", varargs...)
	ret0, _ := ret[0].(*application.LinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinks indicates an expected call of ListLinks.
func (mr *MockApplicationServiceClientMockRecorder) ListLinks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinks", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListLinks), varargs...)
}

// ListResourceActions mocks base method.
func (m *MockApplicationServiceClient) ListResourceActions(ctx context.Context, in *application.ApplicationResourceRequest, opts ...grpc.CallOption) (*application.ResourceActionsListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceActions", varargs...)
	ret0, _ := ret[0].(*application.ResourceActionsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceActions indicates an expected call of ListResourceActions.
func (mr *MockApplicationServiceClientMockRecorder) ListResourceActions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceActions", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListResourceActions), varargs...)
}

// ListResourceEvents mocks base method.
func (m *MockApplicationServiceClient) ListResourceEvents(ctx context.Context, in *application.ApplicationResourceEventsQuery, opts ...grpc.CallOption) (*v1.EventList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceEvents", varargs...)
	ret0, _ := ret[0].(*v1.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceEvents indicates an expected call of ListResourceEvents.
func (mr *MockApplicationServiceClientMockRecorder) ListResourceEvents(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceEvents", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListResourceEvents), varargs...)
}

// ListResourceLinks mocks base method.
func (m *MockApplicationServiceClient) ListResourceLinks(ctx context.Context, in *application.ApplicationResourceRequest, opts ...grpc.CallOption) (*application.LinksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceLinks", varargs...)
	ret0, _ := ret[0].(*application.LinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceLinks indicates an expected call of ListResourceLinks.
func (mr *MockApplicationServiceClientMockRecorder) ListResourceLinks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceLinks", reflect.TypeOf((*MockApplicationServiceClient)(nil).ListResourceLinks), varargs...)
}

// ManagedResources mocks base method.
func (m *MockApplicationServiceClient) ManagedResources(ctx context.Context, in *application.ResourcesQuery, opts ...grpc.CallOption) (*application.ManagedResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManagedResources", varargs...)
	ret0, _ := ret[0].(*application.ManagedResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagedResources indicates an expected call of ManagedResources.
func (mr *MockApplicationServiceClientMockRecorder) ManagedResources(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedResources", reflect.TypeOf((*MockApplicationServiceClient)(nil).ManagedResources), varargs...)
}

// Patch mocks base method.
func (m *MockApplicationServiceClient) Patch(ctx context.Context, in *application.ApplicationPatchRequest, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockApplicationServiceClientMockRecorder) Patch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockApplicationServiceClient)(nil).Patch), varargs...)
}

// PatchResource mocks base method.
func (m *MockApplicationServiceClient) PatchResource(ctx context.Context, in *application.ApplicationResourcePatchRequest, opts ...grpc.CallOption) (*application.ApplicationResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchResource", varargs...)
	ret0, _ := ret[0].(*application.ApplicationResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchResource indicates an expected call of PatchResource.
func (mr *MockApplicationServiceClientMockRecorder) PatchResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResource", reflect.TypeOf((*MockApplicationServiceClient)(nil).PatchResource), varargs...)
}

// PodLogs mocks base method.
func (m *MockApplicationServiceClient) PodLogs(ctx context.Context, in *application.ApplicationPodLogsQuery, opts ...grpc.CallOption) (application.ApplicationService_PodLogsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PodLogs", varargs...)
	ret0, _ := ret[0].(application.ApplicationService_PodLogsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodLogs indicates an expected call of PodLogs.
func (mr *MockApplicationServiceClientMockRecorder) PodLogs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodLogs", reflect.TypeOf((*MockApplicationServiceClient)(nil).PodLogs), varargs...)
}

// ResourceTree mocks base method.
func (m *MockApplicationServiceClient) ResourceTree(ctx context.Context, in *application.ResourcesQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationTree, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResourceTree", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ApplicationTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceTree indicates an expected call of ResourceTree.
func (mr *MockApplicationServiceClientMockRecorder) ResourceTree(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceTree", reflect.TypeOf((*MockApplicationServiceClient)(nil).ResourceTree), varargs...)
}

// RevisionChartDetails mocks base method.
func (m *MockApplicationServiceClient) RevisionChartDetails(ctx context.Context, in *application.RevisionMetadataQuery, opts ...grpc.CallOption) (*v1alpha1.ChartDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevisionChartDetails", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ChartDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionChartDetails indicates an expected call of RevisionChartDetails.
func (mr *MockApplicationServiceClientMockRecorder) RevisionChartDetails(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionChartDetails", reflect.TypeOf((*MockApplicationServiceClient)(nil).RevisionChartDetails), varargs...)
}

// RevisionMetadata mocks base method.
func (m *MockApplicationServiceClient) RevisionMetadata(ctx context.Context, in *application.RevisionMetadataQuery, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevisionMetadata", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RevisionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionMetadata indicates an expected call of RevisionMetadata.
func (mr *MockApplicationServiceClientMockRecorder) RevisionMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionMetadata", reflect.TypeOf((*MockApplicationServiceClient)(nil).RevisionMetadata), varargs...)
}

// Rollback mocks base method.
func (m *MockApplicationServiceClient) Rollback(ctx context.Context, in *application.ApplicationRollbackRequest, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rollback", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockApplicationServiceClientMockRecorder) Rollback(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockApplicationServiceClient)(nil).Rollback), varargs...)
}

// RunResourceAction mocks base method.
func (m *MockApplicationServiceClient) RunResourceAction(ctx context.Context, in *application.ResourceActionRunRequest, opts ...grpc.CallOption) (*application.ApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunResourceAction", varargs...)
	ret0, _ := ret[0].(*application.ApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunResourceAction indicates an expected call of RunResourceAction.
func (mr *MockApplicationServiceClientMockRecorder) RunResourceAction(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunResourceAction", reflect.TypeOf((*MockApplicationServiceClient)(nil).RunResourceAction), varargs...)
}

// Sync mocks base method.
func (m *MockApplicationServiceClient) Sync(ctx context.Context, in *application.ApplicationSyncRequest, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockApplicationServiceClientMockRecorder) Sync(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockApplicationServiceClient)(nil).Sync), varargs...)
}

// TerminateOperation mocks base method.
func (m *MockApplicationServiceClient) TerminateOperation(ctx context.Context, in *application.OperationTerminateRequest, opts ...grpc.CallOption) (*application.OperationTerminateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateOperation", varargs...)
	ret0, _ := ret[0].(*application.OperationTerminateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateOperation indicates an expected call of TerminateOperation.
func (mr *MockApplicationServiceClientMockRecorder) TerminateOperation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateOperation", reflect.TypeOf((*MockApplicationServiceClient)(nil).TerminateOperation), varargs...)
}

// Update mocks base method.
func (m *MockApplicationServiceClient) Update(ctx context.Context, in *application.ApplicationUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockApplicationServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplicationServiceClient)(nil).Update), varargs...)
}

// UpdateSpec mocks base method.
func (m *MockApplicationServiceClient) UpdateSpec(ctx context.Context, in *application.ApplicationUpdateSpecRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpec", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpec indicates an expected call of UpdateSpec.
func (mr *MockApplicationServiceClientMockRecorder) UpdateSpec(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpec", reflect.TypeOf((*MockApplicationServiceClient)(nil).UpdateSpec), varargs...)
}

// Watch mocks base method.
func (m *MockApplicationServiceClient) Watch(ctx context.Context, in *application.ApplicationQuery, opts ...grpc.CallOption) (application.ApplicationService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(application.ApplicationService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockApplicationServiceClientMockRecorder) Watch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockApplicationServiceClient)(nil).Watch), varargs...)
}

// WatchResourceTree mocks base method.
func (m *MockApplicationServiceClient) WatchResourceTree(ctx context.Context, in *application.ResourcesQuery, opts ...grpc.CallOption) (application.ApplicationService_WatchResourceTreeClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchResourceTree", varargs...)
	ret0, _ := ret[0].(application.ApplicationService_WatchResourceTreeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchResourceTree indicates an expected call of WatchResourceTree.
func (mr *MockApplicationServiceClientMockRecorder) WatchResourceTree(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchResourceTree", reflect.TypeOf((*MockApplicationServiceClient)(nil).WatchResourceTree), varargs...)
}
