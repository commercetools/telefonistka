// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/argoproj/argo-cd/v2/pkg/apiclient/project (interfaces: ProjectServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=argocd_project.go -package=mocks github.com/argoproj/argo-cd/v2/pkg/apiclient/project ProjectServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"
	project "github.com/argoproj/argo-cd/v2/pkg/apiclient/project"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	v1 "k8s.io/api/core/v1"
)

// MockProjectServiceClient is a mock of ProjectServiceClient interface.
type MockProjectServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceClientMockRecorder
	isgomock struct{}
}

// MockProjectServiceClientMockRecorder is the mock recorder for MockProjectServiceClient.
type MockProjectServiceClientMockRecorder struct {
	mock *MockProjectServiceClient
}

// NewMockProjectServiceClient creates a new mock instance.
func NewMockProjectServiceClient(ctrl *gomock.Controller) *MockProjectServiceClient {
	mock := &MockProjectServiceClient{ctrl: ctrl}
	mock.recorder = &MockProjectServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceClient) EXPECT() *MockProjectServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectServiceClient) Create(ctx context.Context, in *project.ProjectCreateRequest, opts ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectServiceClient)(nil).Create), varargs...)
}

// CreateToken mocks base method.
func (m *MockProjectServiceClient) CreateToken(ctx context.Context, in *project.ProjectTokenCreateRequest, opts ...grpc.CallOption) (*project.ProjectTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateToken", varargs...)
	ret0, _ := ret[0].(*project.ProjectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockProjectServiceClientMockRecorder) CreateToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockProjectServiceClient)(nil).CreateToken), varargs...)
}

// Delete mocks base method.
func (m *MockProjectServiceClient) Delete(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*project.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*project.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectServiceClient)(nil).Delete), varargs...)
}

// DeleteToken mocks base method.
func (m *MockProjectServiceClient) DeleteToken(ctx context.Context, in *project.ProjectTokenDeleteRequest, opts ...grpc.CallOption) (*project.EmptyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteToken", varargs...)
	ret0, _ := ret[0].(*project.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockProjectServiceClientMockRecorder) DeleteToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockProjectServiceClient)(nil).DeleteToken), varargs...)
}

// Get mocks base method.
func (m *MockProjectServiceClient) Get(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProjectServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectServiceClient)(nil).Get), varargs...)
}

// GetDetailedProject mocks base method.
func (m *MockProjectServiceClient) GetDetailedProject(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*project.DetailedProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetailedProject", varargs...)
	ret0, _ := ret[0].(*project.DetailedProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedProject indicates an expected call of GetDetailedProject.
func (mr *MockProjectServiceClientMockRecorder) GetDetailedProject(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedProject", reflect.TypeOf((*MockProjectServiceClient)(nil).GetDetailedProject), varargs...)
}

// GetGlobalProjects mocks base method.
func (m *MockProjectServiceClient) GetGlobalProjects(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*project.GlobalProjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalProjects", varargs...)
	ret0, _ := ret[0].(*project.GlobalProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalProjects indicates an expected call of GetGlobalProjects.
func (mr *MockProjectServiceClientMockRecorder) GetGlobalProjects(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalProjects", reflect.TypeOf((*MockProjectServiceClient)(nil).GetGlobalProjects), varargs...)
}

// GetSyncWindowsState mocks base method.
func (m *MockProjectServiceClient) GetSyncWindowsState(ctx context.Context, in *project.SyncWindowsQuery, opts ...grpc.CallOption) (*project.SyncWindowsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSyncWindowsState", varargs...)
	ret0, _ := ret[0].(*project.SyncWindowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncWindowsState indicates an expected call of GetSyncWindowsState.
func (mr *MockProjectServiceClientMockRecorder) GetSyncWindowsState(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncWindowsState", reflect.TypeOf((*MockProjectServiceClient)(nil).GetSyncWindowsState), varargs...)
}

// List mocks base method.
func (m *MockProjectServiceClient) List(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*v1alpha1.AppProjectList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectServiceClient)(nil).List), varargs...)
}

// ListEvents mocks base method.
func (m *MockProjectServiceClient) ListEvents(ctx context.Context, in *project.ProjectQuery, opts ...grpc.CallOption) (*v1.EventList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvents", varargs...)
	ret0, _ := ret[0].(*v1.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockProjectServiceClientMockRecorder) ListEvents(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockProjectServiceClient)(nil).ListEvents), varargs...)
}

// ListLinks mocks base method.
func (m *MockProjectServiceClient) ListLinks(ctx context.Context, in *project.ListProjectLinksRequest, opts ...grpc.CallOption) (*application.LinksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLinks", varargs...)
	ret0, _ := ret[0].(*application.LinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLinks indicates an expected call of ListLinks.
func (mr *MockProjectServiceClientMockRecorder) ListLinks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLinks", reflect.TypeOf((*MockProjectServiceClient)(nil).ListLinks), varargs...)
}

// Update mocks base method.
func (m *MockProjectServiceClient) Update(ctx context.Context, in *project.ProjectUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.AppProject, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*v1alpha1.AppProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectServiceClient)(nil).Update), varargs...)
}
