// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/argoproj/argo-cd/v2/pkg/apiclient/settings (interfaces: SettingsServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=argocd_settings.go -package=mocks github.com/argoproj/argo-cd/v2/pkg/apiclient/settings SettingsServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	settings "github.com/argoproj/argo-cd/v2/pkg/apiclient/settings"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSettingsServiceClient is a mock of SettingsServiceClient interface.
type MockSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceClientMockRecorder
	isgomock struct{}
}

// MockSettingsServiceClientMockRecorder is the mock recorder for MockSettingsServiceClient.
type MockSettingsServiceClientMockRecorder struct {
	mock *MockSettingsServiceClient
}

// NewMockSettingsServiceClient creates a new mock instance.
func NewMockSettingsServiceClient(ctrl *gomock.Controller) *MockSettingsServiceClient {
	mock := &MockSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceClient) EXPECT() *MockSettingsServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSettingsServiceClient) Get(ctx context.Context, in *settings.SettingsQuery, opts ...grpc.CallOption) (*settings.Settings, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*settings.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingsServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingsServiceClient)(nil).Get), varargs...)
}

// GetPlugins mocks base method.
func (m *MockSettingsServiceClient) GetPlugins(ctx context.Context, in *settings.SettingsQuery, opts ...grpc.CallOption) (*settings.SettingsPluginsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlugins", varargs...)
	ret0, _ := ret[0].(*settings.SettingsPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockSettingsServiceClientMockRecorder) GetPlugins(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockSettingsServiceClient)(nil).GetPlugins), varargs...)
}
