name: oci-image-publish-on-comment

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  issue_comment:
    types: [created]


env:
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  REGISTRY: ${{ vars.REGISTRY }}

jobs:
  build:
    env:
      CGO_ENABLED: 0
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/publish')
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      statuses: write
      pull-requests: write
      issues: write

    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v3
        id: comment-branch
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}         
      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      - run: echo epoch=$(date +%s) > $GITHUB_OUTPUT
        id: time
      - uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-mod-v1-${{ github.ref_name }}-${{ hashFiles('go.mod') }}-${{ steps.time.outputs.epoch }}
          restore-keys: |
            go-mod-v1-${{ github.ref_name }}-${{ hashFiles('go.mod') }}
            go-mod-v1-${{ github.ref_name }}-
            go-mod-v1-${{ github.event.repository.default_branch }}-${{ hashFiles('go.mod') }}
            go-mod-v1-${{ github.event.repository.default_branch }}-
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false
      - run: go mod tidy -diff
      - run: go test -v ./...
      - run: go test -v -bench . -run "^$" ./...
      - run: go build -o telefonistka .
      - uses: actions/cache/save@v4
        with:
          key: go-mod-v1-${{ github.ref_name }}-${{ hashFiles('go.mod') }}-${{ steps.time.outputs.epoch }}
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into GH registry (ghcr.io)
        uses: docker/login-action@7ca345011ac4304463197fac0e56eab1bc7e6af0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hub registry 
        if: env.DOCKERHUB_USERNAME != '' 
        uses: docker/login-action@7ca345011ac4304463197fac0e56eab1bc7e6af0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # 1st image name is for GH package repo
      # 2nd image name is for DockerHub image
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@906ecf0fc0a80f9110f79d9e6c04b1080f4a2621
        with: 
          context: git
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha


      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@7e094594beda23fc8f21fa31049f4b203e51096b
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract Docker metadata - alpine
        id: meta-alpine
        uses: docker/metadata-action@906ecf0fc0a80f9110f79d9e6c04b1080f4a2621
        with:
          context: git
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          flavor: prefix=alpine-,onlatest=true
      - name: Build and push Docker image - alpine
        id: build-and-push-alpine
        uses: docker/build-push-action@7e094594beda23fc8f21fa31049f4b203e51096b
        with:
          context: .
          target: alpine-release
          push: true
          tags: ${{ steps.meta-alpine.outputs.tags }}
          labels: ${{ steps.meta-alpine.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
      - name: Add comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}\n${{ steps.meta.outputs.tags }}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
